# bot/logic_inline.py
import requests
from config import URL
from database.db import (
    find_photo_by_filters, save_order, get_user_orders,
    get_all_tariffs, get_all_subcodes, get_all_locations,
    # –µ—Å–ª–∏ –Ω–µ—Ç —ç—Ç–∏—Ö —Ç–æ—á–µ—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π, –Ω–µ —Å—Ç—Ä–∞—à–Ω–æ ‚Äî –Ω–∏–∂–µ —è –¥–µ–ª–∞—é –º–∞–ø—ã –∏–∑ —Å–ø–∏—Å–∫–æ–≤
)
from bot.utils import send_support_link


def send_message(chat_id, text):
    requests.post(f"{URL}/sendMessage", json={"chat_id": chat_id, "text": text})


def _inline_keyboard(rows):
    return {"inline_keyboard": rows}


def _row(*buttons):
    return [{"text": t, "callback_data": d} for t, d in buttons]


def _rows_by(buttons, per_row=3):
    return [buttons[i:i+per_row] for i in range(0, len(buttons), per_row)]


# === 1) –¢–∞—Ä–∏—Ñ—ã ===
def send_tariff_buttons(chat_id, per_row=3):
    tariffs = get_all_tariffs()  # [{"id":1,"name":"0.5","emoji":"üì¶"}] –∏–ª–∏ –±–µ–∑ emoji
    if not tariffs:
        send_message(chat_id, "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤.")
        return

    btns = []
    for t in tariffs:
        emoji = t.get("emoji", "üì¶")
        label = f"{emoji} {t['name']}".strip()
        # –∏—Å–ø–æ–ª—å–∑—É–µ–º id –≤ callback
        btns.append((label, f"tariff:{t['id']}"))

    rows = [_row(*chunk) for chunk in _rows_by(btns, per_row=per_row)]
    rows.append(_row(("üßæ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤", "history"), ("üë§ –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç", "my_account")))

    requests.post(f"{URL}/sendMessage", json={
        "chat_id": chat_id,
        "text": "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ:",
        "reply_markup": _inline_keyboard(rows)
    })


# === 2) –¢–∏–ø ===
def send_type_buttons(chat_id, per_row=3):
    types_ = get_all_subcodes()  # [{"id":10,"name":"glo","emoji":"üî•"}]
    if not types_:
        send_message(chat_id, "–¢–∏–ø—ã –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ –∞–¥–º–∏–Ω–∫–µ.")
        return

    btns = []
    for s in types_:
        emoji = s.get("emoji", "")
        label = f"{emoji} {s['name']}".strip()
        btns.append((label, f"type:{s['id']}"))

    rows = [_row(*chunk) for chunk in _rows_by(btns, per_row=per_row)]
    requests.post(f"{URL}/sendMessage", json={
        "chat_id": chat_id,
        "text": "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ç–∏–ø:",
        "reply_markup": _inline_keyboard(rows)
    })


# === 3) –õ–æ–∫–∞—Ü–∏—è ===
def send_location_buttons(chat_id, per_row=3):
    locs = get_all_locations()  # [{"id":100,"name":"kentron","emoji":"üìç"}]
    if not locs:
        send_message(chat_id, "–õ–æ–∫–∞—Ü–∏–∏ –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ –∞–¥–º–∏–Ω–∫–µ.")
        return

    btns = []
    for l in locs:
        emoji = l.get("emoji", "üìç")
        label = f"{emoji} {l['name']}".strip()
        btns.append((label, f"loc:{l['id']}"))

    rows = [_row(*chunk) for chunk in _rows_by(btns, per_row=per_row)]
    requests.post(f"{URL}/sendMessage", json={
        "chat_id": chat_id,
        "text": "üìç –í—ã–±–µ—Ä–∏ –ª–æ–∫–∞—Ü–∏—é:",
        "reply_markup": _inline_keyboard(rows)
    })


# === –æ–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ ===
def process_callback(data, chat_id, user_id, user_state):
    if data == "history":
        orders = get_user_orders(user_id)
        if not orders:
            send_message(chat_id, "‚ùó –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
            return
        msg = "üïì –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:\n"
        for o in orders:
            msg += (f"üì¶ {o['tariff']} | üß© {o['subcode']} | "
                    f"üìç {o['location']} | üóì {o['created_at'].strftime('%d.%m %H:%M')}\n")
        send_message(chat_id, msg)
        return

    # –≤—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞ -> –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø—ã
    if data.startswith("tariff:"):
        tariff_id = data.split(":", 1)[1]

        # —Å–æ—Ö—Ä–∞–Ω–∏–º –ò–î; –∏–º—è –¥–æ—Å—Ç–∞–Ω–µ–º –ø–æ–∑–∂–µ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏/–ø–æ–¥–ø–∏—Å–∏
        user_state[user_id] = {"tariff_id": tariff_id}
        send_type_buttons(chat_id)
        return

    # –≤—ã–±–æ—Ä —Ç–∏–ø–∞ -> –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∫–∞—Ü–∏–∏
    if data.startswith("type:"):
        type_id = data.split(":", 1)[1]
        user_state.setdefault(user_id, {})["type_id"] = type_id
        send_location_buttons(chat_id)
        return

    # –≤—ã–±–æ—Ä –ª–æ–∫–∞—Ü–∏–∏ -> –∏—â–µ–º —Ñ–æ—Ç–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
    if data.startswith("loc:"):
        loc_id = data.split(":", 1)[1]
        st = user_state.get(user_id, {})
        tariff_id = st.get("tariff_id")
        type_id = st.get("type_id")

        if not (tariff_id and type_id):
            send_message(chat_id, "‚ö†Ô∏è –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞: /start")
            return

        # —Å–¥–µ–ª–∞–µ–º –±—ã—Å—Ç—Ä—ã–µ –º–∞–ø—ã id->name (–∏ emoji –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏)
        tariffs = {str(t["id"]): t for t in get_all_tariffs()}
        subcodes = {str(s["id"]): s for s in get_all_subcodes()}
        locations = {str(l["id"]): l for l in get_all_locations()}

        tariff = tariffs.get(str(tariff_id), {})
        subcode = subcodes.get(str(type_id), {})
        location = locations.get(str(loc_id), {})

        tariff_name = tariff.get("name", "")
        subcode_name = subcode.get("name", "")
        location_name = location.get("name", "")

        # –ø–æ–∏—Å–∫ —Ñ–æ—Ç–æ –ø–æ –∏–º–µ–Ω–∞–º (–∫–∞–∫ –±—ã–ª–æ —É —Ç–µ–±—è)
        result = find_photo_by_filters(tariff_name, subcode_name, location_name)
        if result:
            photo_url = f"https://drive.google.com/uc?id={result['drive_file_id']}"
            requests.post(f"{URL}/sendPhoto", json={
                "chat_id": chat_id,
                "photo": photo_url,
                "caption": f"üèô {location_name.title()} / —Ç–∞—Ä–∏—Ñ {tariff_name}-{subcode_name}"
            })
        else:
            send_message(chat_id, "‚ùå –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –Ω–∞–±–æ—Ä.")

        save_order(user_id, tariff_name, subcode_name, location_name)
        send_support_link(chat_id)
        user_state.pop(user_id, None)
